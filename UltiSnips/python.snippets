priority 1

snippet aioi "aiopg insert" b
query = ${1:tablename}.select().where($1.c.${2:column} == $2)
with (yield from request.app['database']) as conn:
    res = yield from conn.execute(query)
    res = yield from res.first()
endsnippet

snippet yf "yield from"
yield from ${1:lol} 
endsnippet 

snippet aios "get session" b
# yield from request.post()
# yield from request.get()
session = yield from get_session(request)
endsnippet

snippet pdb "New pdb" b
from ptpdb import set_trace; set_trace()
endsnippet

snippet adef "async function" b
async def ${1}(${2}):
    ${3:pass}
endsnippet

snippet awith "async with" b
async with ${1}:
    ${2:pass}
endsnippet

snippet str "python3" b
def __str__(self):
    ${1:representation}
endsnippet



##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet try "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet try "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

snippet cl "class" b
class ${1:ClassName}:
    def __init__(self, ${2:}):
	    ${3}
endsnippet

snippet p "print()" 
print(${1:result})
endsnippet

snippet self "self.var = var" 
self.${1:result} = ${1}
endsnippet

